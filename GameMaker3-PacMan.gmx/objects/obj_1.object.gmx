<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite1</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mover
var_speed = 2;
var_angle = 0;
image_speed = 0.2;

var_weapon_selected = 0;

var_weapon_0_damage = 1;
var_weapon_0_timer = 0;
var_weapon_0_limit = 25;
var_weapon_0_ammo =30;

var_weapon_1_damage = 2;
var_weapon_1_timer = 0;
var_weapon_1_limit = 25;
var_weapon_1_ammo =10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movimientos
//key_right = keyboard_check(vk_right); //Continuo
//keyboard_check_pressed(vk_right); //Instantaneo
key_right = keyboard_check(vk_right) || keyboard_check(ord('D'));
key_up = keyboard_check(vk_up) || keyboard_check(ord('W'));
key_left = keyboard_check(vk_left) || keyboard_check(ord('A'));
key_down = keyboard_check(vk_down) || keyboard_check(ord('S'));
//key_shoot = keyboard_check_pressed(vk_space) || keyboard_check_pressed(ord('K'));
key_shoot = keyboard_check(vk_space) || keyboard_check(ord('K'));
key_moving = key_right || key_up || key_left || key_down;

if(key_right){
var_angle = 0;
}
if(key_up){
var_angle = 90;
}
if(key_left){
var_angle = 180;
}
if(key_down){
var_angle = 270;
}
if(key_right &amp;&amp; key_up){
var_angle = 45;
}
if(key_left &amp;&amp; key_up){
var_angle = 135;
}
if(key_left &amp;&amp; key_down){
var_angle = 225;
}
if(key_right &amp;&amp; key_down){
var_angle = 315;
}

//Moving
if( key_moving){
    if (place_meeting(x + (var_speed * sign(cos(degtorad(var_angle)))),y,block))
        while(!place_meeting(x + (sign(cos(degtorad(var_angle)))),y,block))
            x += round(sign(cos(degtorad(var_angle))));
        else
            x += var_speed * round(sign(cos(degtorad(var_angle))));
            
    if (place_meeting(x,y - (var_speed * sign(sin(degtorad(var_angle)))),block))
        while(!place_meeting(x,y - (sign(sin(degtorad(var_angle)))),block))
            y -= round(sign(sin(degtorad(var_angle))));
        else
            y -= var_speed * round(sign(sin(degtorad(var_angle))));
    /*
    x  += (var_speed) * round(cos(degtorad(var_angle)));
    y  -= (var_speed) * round(sin(degtorad(var_angle)));
    */
}
/*if(key_shoot){
    inst_projectile = instance_create(x,y,obj_player_proyectil);
    with(inst_projectile){
        var_speed = 5;
        var_angle = other.var_angle;
        //var_angle
    }
}*/

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Atacking

switch(var_weapon_selected){
    case 0:
        if(var_weapon_0_ammo &gt; 0){
            if(key_shoot){
                var_weapon_0_timer ++;
            }
            else {
                var_weapon_0_timer = 0;
            }
            
            if(var_weapon_0_timer == 1){
                var_weapon_0_ammo --;
                inst_projectile = instance_create(x,y,obj_player_proyectil);
                
                with(inst_projectile){
                    var_damage = other.var_weapon_0_damage;
                    var_angle = other.var_angle;
                    var_speed = 4;
                }
            }
        }
        break;
    case 1:
        if(var_weapon_1_ammo &gt; 0){
            if(key_shoot){
                var_weapon_1_timer ++;
            }
            else {
                var_weapon_1_timer = 0;
            }
            
            if(var_weapon_1_timer &gt;= var_weapon_1_limit){
                var_weapon_1_timer = 0;
            }
            
            if(var_weapon_1_timer == 1){
                var_weapon_1_ammo --;
                inst_projectile = instance_create(x,y,obj_player_proyectil);
                
                with(inst_projectile){
                    var_angle = other.var_angle;
                    var_speed = 6;
                }
            }
        }
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cambio de rotaci√≥n
//Drawing the corresponding subimage
switch(var_angle){
    case 0:
        //draw_sprite_ext(sprite1, image_index, x, y, 1, 1, 0, c_white, 1);
        //draw_sprite_ext(spr_player_straight, image_index, x, y,1,1,0,c_white,1);
        draw_sprite(sprite1, 0,x, y);
        break;
    case 45:
        //draw_sprite_ext(sprite1, image_index, x, y, 1, 1, 0, c_white, 1);
        // draw_sprite_ext(spr_player_angle, image_index, x, y,1,1,0,c_white,1);
        draw_sprite(sprite1, 1,x, y);
        break;
    case 90:
         //draw_sprite_ext(sprite1, image_index, x, y, 1, 1, 90, c_white, 1);
        //draw_sprite_exr(sprite1, sprite3, 0, x, y, 1, 1, 90, c_white, 1);
        draw_sprite(sprite1, 2,x, y);
        break;
    case 135:
        //draw_sprite_ext(sprite1, image_index, x, y, 1, 1, 90, c_white, 1);
        draw_sprite(sprite1, 3,x, y);
        break;
    case 180:
        // draw_sprite_ext(sprite1, image_index, x, y, 1, 1, 180, c_white, 1);
        draw_sprite(sprite1, 4, x, y);
        break;
    case 225:
        //draw_sprite_ext(sprite1, image_index, x, y, 1, 1, 180, c_white, 1);
        draw_sprite(sprite1, 5,x, y);
        break;
    case 270:
         //draw_sprite_ext(sprite1, image_index, x, y, 1, 1, 270, c_white, 1);
        draw_sprite(sprite1, 6, x, y);
        break;
    case 315:
        //draw_sprite_ext(sprite1, image_index, x, y, 1, 1, 270, c_white, 1);
        draw_sprite(sprite1, 7,x, y);
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
